#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../fortuna');
var debug = require('debug')('fortuna:server');
const http = require('http').Server(app);
const io = require('socket.io')(http);
var mongoose = require("mongoose");
const ObjectId = require("mongoose").Types.ObjectId;


// test db function

io.on('connection', socket => {
    socket.on('getDoc', input => {
      console.log(input);
      var siteBlock = mongoose.model("site_blocks");
      let aggregateQuery = [];
      let query = { site_id: ObjectId(input) };
      aggregateQuery.push({ $match: query });
      function emitResponse(){
        siteBlock.aggregate(aggregateQuery).then(async result => {
          // console.log(result);
          io.emit('document', result);
        }).catch(err => {
          console.log(err);
        });
      }
      emitResponse();
      setTimeout(function(){ 
        emitResponse();
      }, 3000);
      setInterval(function(){ 
        emitResponse();
      }, 15000);
    });
    console.log(`Socket ${socket.id} has connected`);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);

//var io = require('../controllers/socket').listen(server);  // required when using socket with controller of PB
http.timeout = 240000000;
http.listen(port, function (err) {
  if (err) {
      console.log(err);
  }
  else {
      console.log('Server api runing on port ', port);
  }
})
http.on('error', onError);
http.on('listening', onListening);

// var io = require('socket.io').listen(server);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
