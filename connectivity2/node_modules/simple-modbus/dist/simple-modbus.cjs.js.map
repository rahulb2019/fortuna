{"version":3,"file":"simple-modbus.cjs.js","sources":["../src/util/typed-event.ts","../src/modbus-server.ts","../src/error/modbus-errors.ts","../src/modbus-commands.ts","../src/modbus-command-factory.ts","../src/tcp/modbus-tcp-command-factory.ts","../src/tcp/modbus-tcp-server.ts"],"sourcesContent":["/**\n * This code is borrowed from Basarat Ali Syed from his Typescript Gitbook.\n * Licensed under Creative Commons https://creativecommons.org/licenses/by/4.0/\n */\nexport interface Listener<T> {\n  (event: T): any;\n}\n\n/**\n * This code is borrowed from Basarat Ali Syed from his Typescript Gitbook.\n * Licensed under Creative Commons https://creativecommons.org/licenses/by/4.0/\n */\nexport interface Disposable {\n  dispose(): any;\n}\n\n/**\n * This code is borrowed from Basarat Ali Syed from his Typescript Gitbook.\n * Licensed under Creative Commons https://creativecommons.org/licenses/by/4.0/\n *\n * Passes through events as they happen. You will not get events from before you start listening\n */\n\nexport class TypedEvent<T> {\n  private listeners: Listener<T>[] = []\n  private listenersOncer: Listener<T>[] = []\n\n  on = (listener: Listener<T>): Disposable => {\n    this.listeners.push(listener)\n    return {\n      dispose: () => this.off(listener)\n    }\n  }\n\n  once = (listener: Listener<T>): void => {\n    this.listenersOncer.push(listener)\n  }\n\n  off = (listener: Listener<T>) => {\n    let callbackIndex = this.listeners.indexOf(listener)\n    if (callbackIndex > -1) this.listeners.splice(callbackIndex, 1)\n  }\n\n  emit = (event: T) => {\n    /** Update any general listeners */\n    this.listeners.forEach((listener) => listener(event))\n\n    /** Clear the `once` queue */\n    this.listenersOncer.forEach((listener) => listener(event))\n    this.listenersOncer = []\n  }\n\n  pipe = (te: TypedEvent<T>): Disposable => {\n    return this.on((e) => te.emit(e))\n  }\n}\n","import {\n  ForceMultipleCoilsCommand,\n  ForceSingleCoilCommand, PresetMultipleRegistersCommand,\n  PresetSingleRegisterCommand,\n  ReadCoilStatusCommand,\n  ReadHoldingRegistersCommand, ReadInputRegistersCommand,\n  ReadInputStatusCommand\n} from './modbus-commands'\nimport { TypedEvent } from './util/typed-event'\nimport { ModbusCommandError } from './error/modbus-errors'\n\n/* istanbul ignore next */\nexport abstract class ModbusServer {\n\n  public readonly onReadCoilStatus = new TypedEvent<ReadCoilStatusCommand>()\n\n  public readonly onReadInputStatus = new TypedEvent<ReadInputStatusCommand>()\n\n  public readonly onReadHoldingRegisters = new TypedEvent<ReadHoldingRegistersCommand>()\n\n  public readonly onReadInputRegisters = new TypedEvent<ReadInputRegistersCommand>()\n\n  public readonly onForceSingleCoil = new TypedEvent<ForceSingleCoilCommand>()\n\n  public readonly onPresetSingleRegister = new TypedEvent<PresetSingleRegisterCommand>()\n\n  public readonly onForceMultipleCoils = new TypedEvent<ForceMultipleCoilsCommand>()\n\n  public readonly onPresetMultipleRegisters = new TypedEvent<PresetMultipleRegistersCommand>()\n\n  public readonly onCommandError = new TypedEvent<ModbusCommandError>()\n\n  public readonly onServerError = new TypedEvent<Error>()\n\n}\n","// export class ModbusServerError extends Error {\n//\n//   // Impossible to get Jest to see super branch as covered, have to ignore whole constructor\n//   /* istanbul ignore next */\n//   constructor(public message: string) {\n//     super(message)\n//     this.name = 'ModbusServerError'\n//     this.message = message\n//     this.stack = (new Error()).stack\n//     Object.setPrototypeOf(this, ModbusServerError.prototype)\n//   }\n//\n//   toString() {\n//     return this.name + ': ' + this.message\n//   }\n// }\n\nexport class ModbusCommandError extends Error {\n\n  public readonly requestBytes?: Buffer\n\n  // Impossible to get Jest to see super branch as covered, have to ignore whole constructor\n  /* istanbul ignore next */\n  constructor(public message: string, requestBytes?: Buffer) {\n    super(message)\n    this.name = 'ModbusCommandError'\n    this.message = message\n    this.stack = (new Error()).stack\n    this.requestBytes = requestBytes\n    Object.setPrototypeOf(this, ModbusCommandError.prototype)\n  }\n\n  toString() {\n    return this.name + ': ' + this.message\n  }\n}\n","import { TypedEvent } from './util/typed-event'\nimport { ModbusCommandError } from './error/modbus-errors'\n\nexport enum ModbusFunctionCode {\n  READ_COIL_STATUS = 0x01,\n  READ_INPUT_STATUS = 0x02,\n  READ_HOLDING_REGISTERS = 0x03,\n  READ_INPUT_REGISTERS = 0x04,\n  FORCE_SINGLE_COIL = 0x05,\n  PRESET_SINGLE_REGISTER = 0x06,\n  FORCE_MULTIPLE_COILS = 0x0f,\n  PRESET_MULTIPLE_REGISTERS = 0x10\n}\n\nexport enum ModbusCommandException {\n  ILLEGAL_FUNCTION = 0x01,\n  ILLEGAL_DATA_ADDRESS = 0x02,\n  ILLEGAL_DATA_VALUE = 0x03,\n  SERVER_DEVICE_FAILURE = 0x04,\n  ACKNOWLEDGE = 0x05,\n  SERVER_DEVICE_BUSY = 0x06,\n  NEGATIVE_ACKNOWLEDGE = 0x07,\n  MEMORY_PARITY_ERROR = 0x08,\n  GATEWAY_PATH_UNAVAILABLE = 0x0a,\n  GATEWAY_TARGET_FAILED_TO_RESPOND = 0x0b\n}\n\nexport enum CoilStatus {\n  ON,\n  OFF\n}\n\n/**\n * @hidden\n */\nexport type UnitIdGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type FunctionCodeGetter = (requestPacket: Buffer) => ModbusFunctionCode\n/**\n * @hidden\n */\nexport type CoilAddressGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type CoilLengthGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type CoilStatusGetter = (requestPacket: Buffer) => boolean\n/**\n * @hidden\n */\nexport type CoilStatusesGetter = (requestPacket: Buffer) => Array<boolean>\n/**\n * @hidden\n */\nexport type InputAddressGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type InputLengthGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type RegisterAddressGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type RegisterValueGetter = (requestPacket: Buffer) => number\n/**\n * @hidden\n */\nexport type RegisterValuesGetter = (requestPacket: Buffer) => Array<number>\n/**\n * @hidden\n */\nexport type RegisterLengthGetter = (requestPacket: Buffer) => number\n\n/**\n * @hidden\n */\nexport type GenericSuccessGetter = (requestPacket: Buffer, length?: number) => Buffer\n/**\n * @hidden\n */\nexport type BoolArraySuccessGetter = (reqestPacket: Buffer, data: Array<boolean>) => Buffer\n/**\n * @hidden\n */\nexport type Uint16ArraySuccessGetter = (requestPacket: Buffer, data: Uint16Array) => Buffer\n/**\n * @hidden\n */\nexport type FailureGetter = (requestPacket: Buffer, exception: ModbusCommandException) => Buffer\n\nexport abstract class ModbusCommand<T extends ModbusCommand<any>> {\n  /**\n   * Fires on either success or failure, with the response bytes. Mainly used by the server to send a response.\n   */\n  public onComplete = new TypedEvent<ModbusCommand<any>>()\n  /**\n   * Fires on a call of the success method.\n   */\n  public onSuccess = new TypedEvent<ModbusCommand<any>>()\n  /**\n   * Fires on a call of the fail method.\n   */\n  public onFailure = new TypedEvent<ModbusCommand<any>>()\n\n  protected readonly _rawPacket: Buffer\n  protected _responsePacket?: Buffer\n  protected readonly _unitIdGetter: UnitIdGetter\n  protected readonly _functionCodeGetter: FunctionCodeGetter\n  protected readonly _successGetter:\n    | GenericSuccessGetter\n    | BoolArraySuccessGetter\n    | Uint16ArraySuccessGetter\n  protected readonly _failureGetter: FailureGetter\n\n  /**\n   * If RTU, unitId is equivalent to slaveId\n   */\n  public get unitId(): number {\n    return this._unitIdGetter(this._rawPacket)\n  }\n\n  /**\n   * Modbus function code\n   */\n  public get functionCode(): ModbusFunctionCode {\n    return this._functionCodeGetter(this._rawPacket)\n  }\n\n  /**\n   * This function will give you the response packet bytes that will be sent on the emitting server. Before calling this function, the `success` or `fail` method must be called in order to set the response.\n   *\n   * @returns A buffer of the bytes representing the response to the server\n   * @throws ModbusCommandError if success or fail hasn't been called yet\n   */\n  public get responsePacket(): Buffer {\n    if (!this._responsePacket) {\n      throw new ModbusCommandError(\n        'Tried to read response packet, but success or fail has not been called.',\n        this._rawPacket\n      )\n    }\n    return this._responsePacket\n  }\n\n  protected constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: GenericSuccessGetter | BoolArraySuccessGetter | Uint16ArraySuccessGetter,\n    failureGetter: FailureGetter\n  ) {\n    this._rawPacket = rawPacket\n    this._unitIdGetter = unitIdGetter\n    this._functionCodeGetter = functionCodeGetter\n    this._successGetter = successGetter\n    this._failureGetter = failureGetter\n  }\n\n  /**\n   * Set a failure on this command to return an exception response to the emitting server.\n   *\n   * @param exception - The reason for the failure\n   */\n  public fail(exception: ModbusCommandException): void {\n    this._responsePacket = this._failureGetter(this._rawPacket, exception)\n    this.onComplete.emit(this)\n    this.onFailure.emit(this)\n  }\n}\n\nexport class ReadCoilStatusCommand extends ModbusCommand<ReadCoilStatusCommand> {\n  private readonly _coilAddressGetter: CoilAddressGetter\n  private readonly _coilLengthGetter: CoilLengthGetter\n\n  public get coilStartAddress() {\n    return this._coilAddressGetter(this._rawPacket)\n  }\n\n  public get numberOfCoils() {\n    return this._coilLengthGetter(this._rawPacket)\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   *\n   * @param data - Boolean coil data, starting at `coilStartAddress`, of length `numberOfCoils`.\n   */\n  public success(data: Array<boolean>): void {\n    // TODO: Throw error here if data length doesn't equal requested length\n    this._responsePacket = (this._successGetter as BoolArraySuccessGetter)(this._rawPacket, data)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: BoolArraySuccessGetter,\n    failureGetter: FailureGetter,\n    coilAddressGetter: CoilAddressGetter,\n    coilLengthGetter: CoilLengthGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._coilAddressGetter = coilAddressGetter\n    this._coilLengthGetter = coilLengthGetter\n  }\n}\n\nexport class ReadInputStatusCommand extends ModbusCommand<ReadInputStatusCommand> {\n  private readonly _inputAddressGetter: InputAddressGetter\n  private readonly _inputLengthGetter: InputLengthGetter\n\n  public get inputStartAddress() {\n    return this._inputAddressGetter(this._rawPacket)\n  }\n\n  public get numberOfInputs() {\n    return this._inputLengthGetter(this._rawPacket)\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   *\n   * @param data - Input status data of requested discrete inputs. `true` = ON, `false` = off\n   */\n  public success(data: Array<boolean>): void {\n    // TODO: Throw error here if data length doesn't equal requested length\n    this._responsePacket = (this._successGetter as BoolArraySuccessGetter)(this._rawPacket, data)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: BoolArraySuccessGetter,\n    failureGetter: FailureGetter,\n    inputAddressGetter: InputAddressGetter,\n    inputLengthGetter: InputLengthGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._inputAddressGetter = inputAddressGetter\n    this._inputLengthGetter = inputLengthGetter\n  }\n}\n\nexport class ReadHoldingRegistersCommand extends ModbusCommand<ReadHoldingRegistersCommand> {\n  private readonly _registerAddressGetter: RegisterAddressGetter\n  private readonly _registerLengthGetter: RegisterLengthGetter\n\n  public get registerStartAddress() {\n    return this._registerAddressGetter(this._rawPacket)\n  }\n\n  public get registerLength() {\n    return this._registerLengthGetter(this._rawPacket)\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   *\n   * @param data - Array of values of the requested holding registers. Register values are 16 bits. Array length must equal `registerLength`. `data[0]` should be the value of the register at `registerStartAddress`.\n   */\n  public success(data: Uint16Array): void {\n    // TODO: Throw error here if data length doesn't equal requested length\n    this._responsePacket = (this._successGetter as Uint16ArraySuccessGetter)(this._rawPacket, data)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: Uint16ArraySuccessGetter,\n    failureGetter: FailureGetter,\n    registerAddressGetter: RegisterAddressGetter,\n    registerLengthGetter: RegisterLengthGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._registerAddressGetter = registerAddressGetter\n    this._registerLengthGetter = registerLengthGetter\n  }\n}\n\nexport class ReadInputRegistersCommand extends ModbusCommand<ReadInputRegistersCommand> {\n  private readonly _registerAddressGetter: RegisterAddressGetter\n  private readonly _registerLengthGetter: RegisterLengthGetter\n\n  public get registerStartAddress() {\n    return this._registerAddressGetter(this._rawPacket)\n  }\n\n  public get registerLength() {\n    return this._registerLengthGetter(this._rawPacket)\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   *\n   * @param data - Array of values of the requested input registers. Register values are 16 bits. Array length must equal `registerLength`. `data[0]` should be the value of the register at `registerStartAddress`.\n   */\n  public success(data: Uint16Array): void {\n    // TODO: Throw error here if data length doesn't equal requested length\n    this._responsePacket = (this._successGetter as Uint16ArraySuccessGetter)(this._rawPacket, data)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: Uint16ArraySuccessGetter,\n    failureGetter: FailureGetter,\n    registerAddressGetter: RegisterAddressGetter,\n    registerLengthGetter: RegisterLengthGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._registerAddressGetter = registerAddressGetter\n    this._registerLengthGetter = registerLengthGetter\n  }\n}\n\nexport class ForceSingleCoilCommand extends ModbusCommand<ForceSingleCoilCommand> {\n  private readonly _coilAddressGetter: CoilAddressGetter\n  private readonly _coilStatusGetter: CoilStatusGetter\n\n  public get coilAddress() {\n    return this._coilAddressGetter(this._rawPacket)\n  }\n\n  public get coilStatus() {\n    return this._coilStatusGetter(this._rawPacket)\n  }\n\n  public get coilStatusAsCoilStatus() {\n    return this.coilStatus === true ? CoilStatus.ON : CoilStatus.OFF\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   */\n  public success(): void {\n    this._responsePacket = (this._successGetter as GenericSuccessGetter)(this._rawPacket)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: GenericSuccessGetter,\n    failureGetter: FailureGetter,\n    coilAddressGetter: CoilAddressGetter,\n    coilStatusGetter: CoilStatusGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._coilAddressGetter = coilAddressGetter\n    this._coilStatusGetter = coilStatusGetter\n  }\n}\n\nexport class PresetSingleRegisterCommand extends ModbusCommand<PresetSingleRegisterCommand> {\n  private readonly _registerAddressGetter: RegisterAddressGetter\n  private readonly _registerValueGetter: RegisterValueGetter\n\n  public get registerAddress() {\n    return this._registerAddressGetter(this._rawPacket)\n  }\n\n  public get registerValue() {\n    return this._registerValueGetter(this._rawPacket)\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   */\n  public success(): void {\n    this._responsePacket = (this._successGetter as GenericSuccessGetter)(this._rawPacket)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: GenericSuccessGetter,\n    failureGetter: FailureGetter,\n    registerAddressGetter: RegisterAddressGetter,\n    registerValueGetter: RegisterValueGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._registerAddressGetter = registerAddressGetter\n    this._registerValueGetter = registerValueGetter\n  }\n}\n\nexport class ForceMultipleCoilsCommand extends ModbusCommand<ForceMultipleCoilsCommand> {\n  private readonly _coilAddressGetter: CoilAddressGetter\n  private readonly _coilLengthGetter: CoilLengthGetter\n  private readonly _coilStatusesGetter: CoilStatusesGetter\n\n  public get coilStartAddress() {\n    return this._coilAddressGetter(this._rawPacket)\n  }\n\n  public get coilLength() {\n    return this._coilLengthGetter(this._rawPacket)\n  }\n\n  public get coilStatuses() {\n    return this._coilStatusesGetter(this._rawPacket)\n  }\n\n  public get coilStatusesAsCoilStatusArray() {\n    return this.coilStatuses.map(x => (x === true ? CoilStatus.ON : CoilStatus.OFF))\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   */\n  public success(): void {\n    this._responsePacket = (this._successGetter as GenericSuccessGetter)(this._rawPacket)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: GenericSuccessGetter,\n    failureGetter: FailureGetter,\n    coilAddressGetter: CoilAddressGetter,\n    coilLengthGetter: CoilLengthGetter,\n    coilStatusesGetter: CoilStatusesGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._coilAddressGetter = coilAddressGetter\n    this._coilLengthGetter = coilLengthGetter\n    this._coilStatusesGetter = coilStatusesGetter\n  }\n}\n\nexport class PresetMultipleRegistersCommand extends ModbusCommand<PresetMultipleRegistersCommand> {\n  private readonly _registerAddressGetter: RegisterAddressGetter\n  private readonly _registerLengthGetter: RegisterLengthGetter\n  private readonly _registerValuesGetter: RegisterValuesGetter\n\n  public get registerStartAddress() {\n    return this._registerAddressGetter(this._rawPacket)\n  }\n\n  public get registerLength() {\n    return this._registerLengthGetter(this._rawPacket)\n  }\n\n  public get registerValues() {\n    return this._registerValuesGetter(this._rawPacket)\n  }\n\n  public get registerValuesAsUint16Array() {\n    return new Uint16Array(this.registerValues)\n  }\n\n  /**\n   * Set success on this command to return a valid response to the emitting server.\n   */\n  public success(): void {\n    this._responsePacket = (this._successGetter as GenericSuccessGetter)(this._rawPacket)\n    this.onComplete.emit(this)\n    this.onSuccess.emit(this)\n  }\n\n  /**\n   * @hidden\n   */\n  constructor(\n    rawPacket: Buffer,\n    unitIdGetter: UnitIdGetter,\n    functionCodeGetter: FunctionCodeGetter,\n    successGetter: GenericSuccessGetter,\n    failureGetter: FailureGetter,\n    registerAddressGetter: RegisterAddressGetter,\n    registerLengthGetter: RegisterLengthGetter,\n    registerValuesGetter: RegisterValuesGetter\n  ) {\n    super(rawPacket, unitIdGetter, functionCodeGetter, successGetter, failureGetter)\n    this._registerAddressGetter = registerAddressGetter\n    this._registerLengthGetter = registerLengthGetter\n    this._registerValuesGetter = registerValuesGetter\n  }\n}\n","import { ModbusCommand } from './modbus-commands'\n\nexport class ModbusCommandFactoryOptions {\n\n  /**\n   * @default: true\n   * If this option is set, the server will use 0 based coil, input status, and register addresses.\n   * For instance, register 40001 will be 0, 40002 will be 1, etc.\n   *\n   * ```\n   * |                  | simple | modbus |\n   * |------------------|--------|--------|\n   * | Coil             |   0    | 1      |\n   * | Coil             |   1    | 2      |\n   * | Input            |   0    | 10001  |\n   * | Input            |   1    | 10002  |\n   * | Holding Register |   0    | 30001  |\n   * | Holding Register |   1    | 30002  |\n   * | Input Register   |   0    | 40001  |\n   * | Input Register   |   1    | 40002  |\n   * ```\n   */\n  simpleAddressing?: boolean\n\n}\n\nexport abstract class ModbusCommandFactory {\n\n  protected readonly simpleAddressing: boolean = true\n\n  protected constructor(options?: ModbusCommandFactoryOptions) {\n    if(options !== undefined){\n      if(options.simpleAddressing === false) {\n        this.simpleAddressing = false\n      }\n    }\n  }\n\n  abstract fromPacket(packet: Buffer): ModbusCommand<any>\n\n}\n","import {\n  BoolArraySuccessGetter,\n  CoilAddressGetter,\n  CoilLengthGetter, CoilStatusesGetter, CoilStatusGetter,\n  FailureGetter, ForceMultipleCoilsCommand, ForceSingleCoilCommand,\n  FunctionCodeGetter,\n  GenericSuccessGetter,\n  InputAddressGetter,\n  InputLengthGetter,\n  ModbusFunctionCode, PresetMultipleRegistersCommand,\n  PresetSingleRegisterCommand,\n  ReadCoilStatusCommand,\n  ReadHoldingRegistersCommand,\n  ReadInputRegistersCommand,\n  ReadInputStatusCommand,\n  RegisterAddressGetter,\n  RegisterLengthGetter,\n  RegisterValueGetter, RegisterValuesGetter,\n  Uint16ArraySuccessGetter,\n  UnitIdGetter\n} from '../modbus-commands'\nimport { ModbusCommandError } from '../error/modbus-errors'\nimport { ModbusCommandFactory, ModbusCommandFactoryOptions } from '../modbus-command-factory'\n\nexport class ModbusTcpCommandFactory extends ModbusCommandFactory {\n\n  private _options?: ModbusCommandFactoryOptions\n\n  constructor(options?: ModbusCommandFactoryOptions) {\n    super(options)\n    this._options = options\n  }\n\n  private _unitIdGetter: UnitIdGetter = (requestPacket => {\n    return requestPacket.readUInt8(6)\n  })\n\n  private _functionCodeGetter: FunctionCodeGetter = (requestPacket => {\n    return requestPacket.readUInt8(7)\n  })\n\n  private _packetCopySuccessGetter: GenericSuccessGetter = (requestPacket => Buffer.from(requestPacket))\n\n  private _forceMultipleCoilsSuccessGetter: GenericSuccessGetter = (requestPacket => {\n    const response = Array.from(requestPacket).slice(0, 12)\n    response[4] = 0x00\n    response[5] = 0x06\n    return Buffer.from(response)\n  })\n\n  private _failureGetter: FailureGetter = ((requestPacket, exception) => {\n    let response = []\n\n    // First 2 bytes are the Transaction Identifier\n    response[0] = requestPacket.readUInt8(0)\n    response[1] = requestPacket.readUInt8(1)\n\n    // Next 2 bytes are protocol ID. These should always be 0x0000. But the protocol says to copy them from the request.\n    response[2] = requestPacket.readUInt8(2)\n    response[3] = requestPacket.readUInt8(3)\n\n    // Failure length is always constant\n    response[4] = 0x00\n    response[5] = 0x03\n\n    // Copy UnitId from request\n    response[6] = requestPacket.readUInt8(6)\n\n    // Function code is request function code with highest bit set\n    response[7] = requestPacket.readUInt8(7) | 0b10000000\n    response[8] = exception\n\n    return Buffer.from(new Uint8Array(response))\n  })\n\n  private _presetMultipleRegistersSuccessGetter: GenericSuccessGetter = (requestPacket => {\n    const response = Array.from(requestPacket).slice(0, 12)\n    response[4] = 0x00\n    response[5] = 0x06\n    return Buffer.from(response)\n  })\n\n  private static _stubTcpHeader(requestPacket: Buffer) {\n    let response = []\n\n    // First 2 bytes are the Transaction Identifier\n    response[0] = requestPacket.readUInt8(0)\n    response[1] = requestPacket.readUInt8(1)\n\n    // Next 2 bytes are protocol ID. These should always be 0x0000. But the protocol says to copy them from the request.\n    response[2] = requestPacket.readUInt8(2)\n    response[3] = requestPacket.readUInt8(3)\n\n    // Copy UnitId from request\n    response[6] = requestPacket.readUInt8(6)\n\n    // Copy Function Code from request\n    response[7] = requestPacket.readUInt8(7)\n    return response\n  }\n\n  private _readCoilSuccessGetter: BoolArraySuccessGetter = (requestPacket, data) => {\n    let response = ModbusTcpCommandFactory._stubTcpHeader(requestPacket)\n\n    // Calculate number of bytes with coil data in response\n    const coilsRequested = this._coilLengthGetter(requestPacket)\n    const byteLength = Math.ceil(coilsRequested / 8.0)\n    response[8] = byteLength\n\n    // TCP byte length data\n    response[4] = (byteLength + 3) >> 8\n    response[5] = (byteLength + 3) & 0xFF\n\n    // Pad array with false at end to end on an 8 bit boundary\n    const paddedData = [...data, ...(new Array<boolean>(8 - (coilsRequested % 8)).fill(false))]\n    for (let i = 0; i < byteLength; i++) {\n      // Take a slice of the array of length 8, reverse it, then fill the accumulator with it (starting from right)\n      response[9 + i] = paddedData.slice(i * 8, 8 + (i * 8)).reduce(\n        (accumulator, currentValue, currentIndex) => accumulator | ((currentValue ? 1 : 0) << currentIndex),\n        0x00)\n    }\n\n    return Buffer.from(new Uint8Array(response))\n  }\n\n  private _readInputStatusSuccessGetter: BoolArraySuccessGetter = (requestPacket, data) => {\n    let response = ModbusTcpCommandFactory._stubTcpHeader(requestPacket)\n\n    // Calculate number of bytes with coil data in response\n    const inputsRequested = this._inputLengthGetter(requestPacket)\n    const byteLength = Math.ceil(inputsRequested / 8.0)\n    response[8] = byteLength\n\n    // TCP byte length data\n    response[4] = (byteLength + 3) >> 8\n    response[5] = (byteLength + 3) & 0xFF\n\n    // Pad array with false at end to end on an 8 bit boundary\n    const paddedData = [...data, ...(new Array<boolean>(8 - (inputsRequested % 8)).fill(false))]\n    for (let i = 0; i < byteLength; i++) {\n      // Take a slice of the array of length 8, and fill the accumulator with it (starting from right)\n      response[9 + i] = paddedData.slice(i * 8, 8 + (i * 8)).reduce(\n        (accumulator, currentValue, currentIndex) => accumulator | ((currentValue ? 1 : 0) << currentIndex),\n        0x00)\n    }\n\n    return Buffer.from(new Uint8Array(response))\n  }\n\n  private _readRegistersSuccessGetter: Uint16ArraySuccessGetter = (requestPacket, data) => {\n    let response = ModbusTcpCommandFactory._stubTcpHeader(requestPacket)\n\n    // Calculate number of bytes with coil data in response\n    const registersRequested = this._registerLengthGetter(requestPacket)\n    const byteLength = registersRequested * 2\n    response[8] = byteLength\n\n    // TCP byte length data\n    response[4] = (byteLength + 3) >> 8\n    response[5] = (byteLength + 3) & 0xFF\n\n    for (let i = 0; i < registersRequested; i++) {\n      response[9 + (i * 2)] = data[i] >> 8\n      response[10 + (i * 2)] = data[i] & 0xFF\n    }\n\n    return Buffer.from(new Uint8Array(response))\n  }\n\n  private _holdingRegisterAddressGetter: RegisterAddressGetter = (requestPacket => {\n    return this.simpleAddressing ? requestPacket.readUInt16BE(8) : requestPacket.readUInt16BE(8) + 40001\n  })\n\n  private _inputRegisterAddressGetter: RegisterAddressGetter = (requestPacket => {\n    return this.simpleAddressing ? requestPacket.readUInt16BE(8) : requestPacket.readUInt16BE(8) + 30001\n  })\n\n  private _registerValueGetter: RegisterValueGetter = (requestPacket => {\n    return requestPacket.readUInt16BE(10)\n  })\n\n  private _registerLengthGetter: RegisterLengthGetter = (requestPacket => {\n    return requestPacket.readUInt16BE(10)\n  })\n\n  private _coilAddressGetter: CoilAddressGetter = (requestPacket => {\n    return this.simpleAddressing ? requestPacket.readUInt16BE(8) : requestPacket.readUInt16BE(8) + 1\n  })\n\n  private _coilLengthGetter: CoilLengthGetter = (requestPacket => {\n    return requestPacket.readUInt16BE(10)\n  })\n\n  private _coilStatusGetter: CoilStatusGetter = (requestPacket => {\n    const value = requestPacket.readUInt16BE(10)\n    if (value === 0xFF00) {\n      return true\n    } else if (value === 0x0000) {\n      return false\n    }\n    throw new Error('_coilStatusGetter invalid value')\n  })\n\n  private _coilStatusesGetter: CoilStatusesGetter = requestPacket => {\n    const coilLength = this._coilLengthGetter(requestPacket)\n    const byteLength = Math.ceil(coilLength / 8.0)\n    const packetByteLength = requestPacket.readUInt8(12)\n\n    if (byteLength !== packetByteLength || requestPacket.length !== byteLength + 13) {\n      // Malformed packet, check and throw exception\n      throw new Error('_coilStatusesGetter invalid length')\n    }\n\n    const coilArray = new Array<boolean>(byteLength * 8)\n    for (let i = 0; i < byteLength; i++) {\n      let byteVal = requestPacket.readUInt8(13 + i)\n      for (let j = 0; j < 8; j++) {\n        coilArray[(i * 8) + j] = ((byteVal >> j) & 0x01) === 1\n      }\n    }\n    return coilArray.slice(0, coilLength)\n  }\n\n  private _registerValuesGetter: RegisterValuesGetter = requestPacket => {\n    const registerLength = this._registerLengthGetter(requestPacket)\n    const byteLength = registerLength * 2\n    const packetByteLength = requestPacket.readUInt8(12)\n\n    if (byteLength !== packetByteLength || requestPacket.length !== byteLength + 13) {\n      // Malformed packet, check and throw exception\n      throw new Error('_registerValuesGetter invalidValue')\n    }\n\n    const registerArray = new Array<number>(registerLength)\n    for (let i = 0; i < registerLength; i++) {\n      registerArray[i] = requestPacket.readUInt16BE(13 + (i * 2))\n    }\n    return registerArray\n  }\n\n  private _inputAddressGetter: InputAddressGetter = (requestPacket => {\n    return this.simpleAddressing ? requestPacket.readUInt16BE(8) : requestPacket.readUInt16BE(8) + 10001\n  })\n\n  private _inputLengthGetter: InputLengthGetter = (requestPacket => {\n    return requestPacket.readUInt16BE(10)\n  })\n\n  public fromPacket(packet: Buffer) {\n    // Minimum Modbus TCP request packet size is 12\n    if (packet.length < 12) {\n      throw new ModbusCommandError('Packet length too short', packet)\n    }\n\n    const fc = this._functionCodeGetter(packet)\n\n    // Determine packet type, and call appropriate constructor\n    switch (fc) {\n      case ModbusFunctionCode.READ_COIL_STATUS:\n        return new ReadCoilStatusCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._readCoilSuccessGetter,\n          this._failureGetter, this._coilAddressGetter,\n          this._coilLengthGetter)\n      case ModbusFunctionCode.READ_INPUT_STATUS:\n        return new ReadInputStatusCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._readInputStatusSuccessGetter,\n          this._failureGetter, this._inputAddressGetter,\n          this._inputLengthGetter)\n      case ModbusFunctionCode.READ_HOLDING_REGISTERS:\n        return new ReadHoldingRegistersCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._readRegistersSuccessGetter,\n          this._failureGetter, this._holdingRegisterAddressGetter,\n          this._registerLengthGetter)\n      case ModbusFunctionCode.READ_INPUT_REGISTERS:\n        return new ReadInputRegistersCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._readRegistersSuccessGetter,\n          this._failureGetter, this._inputRegisterAddressGetter,\n          this._registerLengthGetter)\n      case ModbusFunctionCode.FORCE_SINGLE_COIL:\n        try {\n          this._coilStatusGetter(packet)\n        } catch {\n          throw new ModbusCommandError('FORCE_SINGLE_COIL - Invalid coil status received', packet)\n        }\n        return new ForceSingleCoilCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._packetCopySuccessGetter,\n          this._failureGetter, this._coilAddressGetter,\n          this._coilStatusGetter)\n      case ModbusFunctionCode.PRESET_SINGLE_REGISTER:\n        return new PresetSingleRegisterCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._packetCopySuccessGetter,\n          this._failureGetter, this._holdingRegisterAddressGetter,\n          this._registerValueGetter)\n      case ModbusFunctionCode.FORCE_MULTIPLE_COILS:\n        try {\n          this._coilStatusesGetter(packet)\n        } catch {\n          throw new ModbusCommandError('FORCE_MULTIPLE_COILS - Invalid coil status command received', packet)\n        }\n        return new ForceMultipleCoilsCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._forceMultipleCoilsSuccessGetter,\n          this._failureGetter, this._coilAddressGetter,\n          this._coilLengthGetter, this._coilStatusesGetter)\n      case ModbusFunctionCode.PRESET_MULTIPLE_REGISTERS:\n        try {\n          this._registerValuesGetter(packet)\n        } catch {\n          throw new ModbusCommandError('PRESET_MULTIPLE_REGISTERS - Invalid register command received', packet)\n        }\n        return new PresetMultipleRegistersCommand(packet, this._unitIdGetter,\n          this._functionCodeGetter, this._presetMultipleRegistersSuccessGetter,\n          this._failureGetter, this._holdingRegisterAddressGetter,\n          this._registerLengthGetter, this._registerValuesGetter)\n      default:\n        throw new ModbusCommandError('Function code not implemented', packet)\n    }\n  }\n\n}\n","import net from 'net'\nimport '../util/typed-event'\nimport { ModbusServer } from '../modbus-server'\nimport { ModbusTcpCommandFactory } from './modbus-tcp-command-factory'\nimport {\n  ForceMultipleCoilsCommand,\n  ForceSingleCoilCommand,\n  ModbusCommand,\n  ModbusFunctionCode, PresetMultipleRegistersCommand,\n  PresetSingleRegisterCommand,\n  ReadCoilStatusCommand, ReadHoldingRegistersCommand, ReadInputRegistersCommand, ReadInputStatusCommand\n} from '../modbus-commands'\nimport { ModbusCommandFactoryOptions } from '../modbus-command-factory'\nimport { ModbusCommandError } from '../error/modbus-errors'\n\n/**\n * Options that only affect the server (timeouts, etc.) should go here,\n * options that affect the commands being emitted should be added to [ModbusCommandFactoryOptions](../classes/modbuscommandfactoryoptions.html)\n */\nexport interface ModbusTcpServerOptions extends ModbusCommandFactoryOptions {\n}\n\nexport class ModbusTcpServer extends ModbusServer {\n  private _tcpServer: net.Server\n  private _commandFactory = new ModbusTcpCommandFactory()\n  private _options?: ModbusTcpServerOptions\n\n  constructor(options?: ModbusTcpServerOptions) {\n    super()\n\n    this._options = options\n    this._commandFactory = new ModbusTcpCommandFactory(options)\n\n    this._tcpServer = net.createServer(socket => {\n      const _this: ModbusTcpServer = this\n\n      socket.on('data', data => {\n        try {\n          // Build object from packet\n          let command = this._commandFactory.fromPacket(data)\n\n          // Listen for success or failure events being emitted from command object\n          command.onComplete.once((command: ModbusCommand<any>) => {\n            socket.write(command.responsePacket)\n          })\n\n          // Determine packet type and emit corresponding event type\n          switch (command.functionCode) {\n            case ModbusFunctionCode.READ_COIL_STATUS:\n              _this.onReadCoilStatus.emit(command as ReadCoilStatusCommand)\n              break\n            case ModbusFunctionCode.READ_INPUT_STATUS:\n              _this.onReadInputStatus.emit(command as ReadInputStatusCommand)\n              break\n            case ModbusFunctionCode.READ_HOLDING_REGISTERS:\n              _this.onReadHoldingRegisters.emit(command as ReadHoldingRegistersCommand)\n              break\n            case ModbusFunctionCode.READ_INPUT_REGISTERS:\n              _this.onReadInputRegisters.emit(command as ReadInputRegistersCommand)\n              break\n            case ModbusFunctionCode.FORCE_SINGLE_COIL:\n              _this.onForceSingleCoil.emit(command as ForceSingleCoilCommand)\n              break\n            case ModbusFunctionCode.PRESET_SINGLE_REGISTER:\n              _this.onPresetSingleRegister.emit(command as PresetSingleRegisterCommand)\n              break\n            case ModbusFunctionCode.FORCE_MULTIPLE_COILS:\n              _this.onForceMultipleCoils.emit(command as ForceMultipleCoilsCommand)\n              break\n            case ModbusFunctionCode.PRESET_MULTIPLE_REGISTERS:\n              _this.onPresetMultipleRegisters.emit(command as PresetMultipleRegistersCommand)\n              break\n          }\n        } catch (e) {\n          // TODO: Explicit typeguard here, look into changing from try/catch\n          _this.onCommandError.emit(e as ModbusCommandError)\n        }\n\n      })\n\n      socket.on('error', e => {\n        _this.onServerError.emit(e)\n      })\n\n    })\n  }\n\n  public listen(port: number): ModbusTcpServer {\n    this._tcpServer.listen(port)\n    return this\n  }\n\n  public close(): ModbusTcpServer {\n    this._tcpServer.close()\n    return this\n  }\n}\n"],"names":["tslib_1.__extends","ModbusFunctionCode","ModbusCommandException"],"mappings":"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"}